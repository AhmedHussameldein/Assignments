
RTOS_Assignment(1).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000596  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000596  0000062a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800062  00800062  0000062c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f17  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b4  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086a  00000000  00000000  00001eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00002720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000621  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075c  00000000  00000000  0000301d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_10>
  2c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  8a:	0c 94 c9 02 	jmp	0x592	; 0x592 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Dir>:
		break;
		default:
		return 0;
		break;
	}
}
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPin_Dir+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	c9 f1       	breq	.+114    	; 0x10c <DIO_SetPin_Dir+0x7a>
  9a:	08 95       	ret
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_SetPin_Dir+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPin_Dir+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_SetPin_Dir+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_SetPin_Dir+0x62>
  aa:	08 95       	ret
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPin_Dir+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPin_Dir+0x22>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPin_Dir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPin_Dir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Dir+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Dir+0x52>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
  f2:	08 95       	ret
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPin_Dir+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPin_Dir+0x6a>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
 10a:	08 95       	ret
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	89 f0       	breq	.+34     	; 0x132 <DIO_SetPin_Dir+0xa0>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_SetPin_Dir+0x8a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c9 f0       	breq	.+50     	; 0x148 <DIO_SetPin_Dir+0xb6>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <DIO_SetPin_Dir+0xcc>
 11a:	08 95       	ret
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Dir+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Dir+0x92>
 12c:	82 2b       	or	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
 130:	08 95       	ret
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Dir+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Dir+0xa8>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
 146:	08 95       	ret
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Dir+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Dir+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
 15c:	08 95       	ret
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPin_Dir+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPin_Dir+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPin_Value>:
 174:	44 23       	and	r20, r20
 176:	d9 f1       	breq	.+118    	; 0x1ee <DIO_SetPin_Value+0x7a>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_SetPin_Value+0xa>
 17c:	6b c0       	rjmp	.+214    	; 0x254 <DIO_SetPin_Value+0xe0>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 f0       	breq	.+36     	; 0x1a6 <DIO_SetPin_Value+0x32>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPin_Value+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	d9 f0       	breq	.+54     	; 0x1be <DIO_SetPin_Value+0x4a>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_SetPin_Value+0x62>
 18c:	08 95       	ret
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPin_Value+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPin_Value+0x22>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	08 95       	ret
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPin_Value+0x3e>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPin_Value+0x3a>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPin_Value+0x56>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPin_Value+0x52>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	08 95       	ret
 1d6:	22 b3       	in	r18, 0x12	; 18
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPin_Value+0x6e>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPin_Value+0x6a>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	82 bb       	out	0x12, r24	; 18
 1ec:	08 95       	ret
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f0       	breq	.+34     	; 0x214 <DIO_SetPin_Value+0xa0>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_SetPin_Value+0x8a>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c9 f0       	breq	.+50     	; 0x22a <DIO_SetPin_Value+0xb6>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	11 f1       	breq	.+68     	; 0x240 <DIO_SetPin_Value+0xcc>
 1fc:	08 95       	ret
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_Value+0x96>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_Value+0x92>
 20e:	82 2b       	or	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
 212:	08 95       	ret
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_Value+0xac>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_Value+0xa8>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPin_Value+0xc2>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPin_Value+0xbe>
 23a:	82 2b       	or	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
 23e:	08 95       	ret
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPin_Value+0xd8>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPin_Value+0xd4>
 250:	82 2b       	or	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <DIO_TogglePin_Value>:

void DIO_TogglePin_Value(Uint8 port_name, Uint8 pin_name)
{
	switch(port_name)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	89 f0       	breq	.+34     	; 0x27c <DIO_TogglePin_Value+0x26>
 25a:	28 f0       	brcs	.+10     	; 0x266 <DIO_TogglePin_Value+0x10>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	c9 f0       	breq	.+50     	; 0x292 <DIO_TogglePin_Value+0x3c>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	11 f1       	breq	.+68     	; 0x2a8 <DIO_TogglePin_Value+0x52>
 264:	08 95       	ret
	{
		case DIO_PORTA:
		Toggle_Bit(PORTA,pin_name);
 266:	2b b3       	in	r18, 0x1b	; 27
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_TogglePin_Value+0x1c>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_TogglePin_Value+0x18>
 276:	82 27       	eor	r24, r18
 278:	8b bb       	out	0x1b, r24	; 27
		break;
 27a:	08 95       	ret
		case DIO_PORTB:
		Toggle_Bit(PORTB,pin_name);
 27c:	28 b3       	in	r18, 0x18	; 24
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_TogglePin_Value+0x32>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_TogglePin_Value+0x2e>
 28c:	82 27       	eor	r24, r18
 28e:	88 bb       	out	0x18, r24	; 24
		break;
 290:	08 95       	ret
		case DIO_PORTC:
		Toggle_Bit(PORTC,pin_name);
 292:	25 b3       	in	r18, 0x15	; 21
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_TogglePin_Value+0x48>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_TogglePin_Value+0x44>
 2a2:	82 27       	eor	r24, r18
 2a4:	85 bb       	out	0x15, r24	; 21
		break;
 2a6:	08 95       	ret
		case DIO_PORTD:
		Toggle_Bit(PORTD,pin_name);
 2a8:	22 b3       	in	r18, 0x12	; 18
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_TogglePin_Value+0x5e>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_TogglePin_Value+0x5a>
 2b8:	82 27       	eor	r24, r18
 2ba:	82 bb       	out	0x12, r24	; 18
 2bc:	08 95       	ret

000002be <LED0_Init>:
{
	DIO_SetPin_Value(LED2_Port, LED2_Pin, PIN_ON);
}
void LED2_OFF(void)
{
	DIO_SetPin_Value(LED2_Port, LED2_Pin, PIN_OFF);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Dir>
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 2d2:	08 95       	ret

000002d4 <LED0_Toggle>:
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_TogglePin_Value>
 2dc:	08 95       	ret

000002de <LED1_Init>:
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	67 e0       	ldi	r22, 0x07	; 7
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Dir>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	67 e0       	ldi	r22, 0x07	; 7
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 2f2:	08 95       	ret

000002f4 <LED1_Toggle>:
 2f4:	67 e0       	ldi	r22, 0x07	; 7
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_TogglePin_Value>
 2fc:	08 95       	ret

000002fe <LED2_Init>:
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	63 e0       	ldi	r22, 0x03	; 3
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Dir>
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 312:	08 95       	ret

00000314 <LED2_Toggle>:
}

void LED2_Toggle(void)
{
	DIO_TogglePin_Value(LED2_Port, LED2_Pin);
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_TogglePin_Value>
 31c:	08 95       	ret

0000031e <main>:
extern Uint8 Flag_3;

int main(void)
{
	// Timer and led initialization
	Timer0_Init();
 31e:	0e 94 be 01 	call	0x37c	; 0x37c <Timer0_Init>
    LED0_Init();
 322:	0e 94 5f 01 	call	0x2be	; 0x2be <LED0_Init>
	LED1_Init();
 326:	0e 94 6f 01 	call	0x2de	; 0x2de <LED1_Init>
	LED2_Init();
 32a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED2_Init>
	
	// First Toggle out of timer
	LED0_Toggle();
 32e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED0_Toggle>
	LED1_Toggle();
 332:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LED1_Toggle>
	LED2_Toggle();
 336:	0e 94 8a 01 	call	0x314	; 0x314 <LED2_Toggle>
		
	// Starting the timer to count	
	Timer0_Start();	
 33a:	0e 94 16 02 	call	0x42c	; 0x42c <Timer0_Start>
	Timer0_SetDelay(500);
 33e:	64 ef       	ldi	r22, 0xF4	; 244
 340:	71 e0       	ldi	r23, 0x01	; 1
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 cb 01 	call	0x396	; 0x396 <Timer0_SetDelay>
	
    while (1) 
    {
		// Flag Conditions
		if(Flag_1 == 1)
 34a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Flag_1>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	21 f4       	brne	.+8      	; 0x35a <main+0x3c>
		{
			LED0_Toggle();
 352:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED0_Toggle>
			Flag_1 = 0;
 356:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Flag_1>
		}
		
		if(Flag_2 == 1)
 35a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Flag_2>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	21 f4       	brne	.+8      	; 0x36a <main+0x4c>
		{
			LED1_Toggle();
 362:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LED1_Toggle>
			Flag_2 = 0;
 366:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Flag_2>
		}
		
		if(Flag_3 == 1)
 36a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Flag_3>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	61 f7       	brne	.-40     	; 0x34a <main+0x2c>
		{
			LED2_Toggle();
 372:	0e 94 8a 01 	call	0x314	; 0x314 <LED2_Toggle>
			Flag_3 = 0;
 376:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Flag_3>
 37a:	e7 cf       	rjmp	.-50     	; 0x34a <main+0x2c>

0000037c <Timer0_Init>:
{
	TCCR0 = (Timer0_CLK) | (TCCR0 & 0XF8);
}
void Timer0_Stop(void)
{
	TCCR0 &= 0XF8; // TCCR0 = TCCR0 & 0XF8
 37c:	8f b7       	in	r24, 0x3f	; 63
 37e:	80 68       	ori	r24, 0x80	; 128
 380:	8f bf       	out	0x3f, r24	; 63
 382:	83 b7       	in	r24, 0x33	; 51
 384:	87 7f       	andi	r24, 0xF7	; 247
 386:	83 bf       	out	0x33, r24	; 51
 388:	83 b7       	in	r24, 0x33	; 51
 38a:	8f 7b       	andi	r24, 0xBF	; 191
 38c:	83 bf       	out	0x33, r24	; 51
 38e:	89 b7       	in	r24, 0x39	; 57
 390:	81 60       	ori	r24, 0x01	; 1
 392:	89 bf       	out	0x39, r24	; 57
 394:	08 95       	ret

00000396 <Timer0_SetDelay>:
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	9b 01       	movw	r18, r22
 39c:	ac 01       	movw	r20, r24
 39e:	a8 ee       	ldi	r26, 0xE8	; 232
 3a0:	b3 e0       	ldi	r27, 0x03	; 3
 3a2:	0e 94 af 02 	call	0x55e	; 0x55e <__muluhisi3>
 3a6:	8b 01       	movw	r16, r22
 3a8:	9c 01       	movw	r18, r24
 3aa:	68 94       	set
 3ac:	15 f8       	bld	r1, 5
 3ae:	36 95       	lsr	r19
 3b0:	27 95       	ror	r18
 3b2:	17 95       	ror	r17
 3b4:	07 95       	ror	r16
 3b6:	16 94       	lsr	r1
 3b8:	d1 f7       	brne	.-12     	; 0x3ae <Timer0_SetDelay+0x18>
 3ba:	01 30       	cpi	r16, 0x01	; 1
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	14 07       	cpc	r17, r20
 3c0:	21 05       	cpc	r18, r1
 3c2:	31 05       	cpc	r19, r1
 3c4:	60 f4       	brcc	.+24     	; 0x3de <Timer0_SetDelay+0x48>
 3c6:	80 2f       	mov	r24, r16
 3c8:	81 95       	neg	r24
 3ca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Timer0_Init_val>
 3ce:	82 bf       	out	0x32, r24	; 50
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Timer0_No_OVFs+0x1>
 3d8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Timer0_No_OVFs>
 3dc:	24 c0       	rjmp	.+72     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3de:	01 11       	cpse	r16, r1
 3e0:	0c c0       	rjmp	.+24     	; 0x3fa <Timer0_SetDelay+0x64>
 3e2:	ab 01       	movw	r20, r22
 3e4:	bc 01       	movw	r22, r24
 3e6:	03 2e       	mov	r0, r19
 3e8:	3e e0       	ldi	r19, 0x0E	; 14
 3ea:	76 95       	lsr	r23
 3ec:	67 95       	ror	r22
 3ee:	57 95       	ror	r21
 3f0:	47 95       	ror	r20
 3f2:	3a 95       	dec	r19
 3f4:	d1 f7       	brne	.-12     	; 0x3ea <Timer0_SetDelay+0x54>
 3f6:	30 2d       	mov	r19, r0
 3f8:	0d c0       	rjmp	.+26     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3fa:	ab 01       	movw	r20, r22
 3fc:	bc 01       	movw	r22, r24
 3fe:	03 2e       	mov	r0, r19
 400:	3e e0       	ldi	r19, 0x0E	; 14
 402:	76 95       	lsr	r23
 404:	67 95       	ror	r22
 406:	57 95       	ror	r21
 408:	47 95       	ror	r20
 40a:	3a 95       	dec	r19
 40c:	d1 f7       	brne	.-12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40e:	30 2d       	mov	r19, r0
 410:	4f 5f       	subi	r20, 0xFF	; 255
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <Timer0_No_OVFs+0x1>
 418:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <Timer0_No_OVFs>
 41c:	80 2f       	mov	r24, r16
 41e:	81 95       	neg	r24
 420:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Timer0_Init_val>
 424:	82 bf       	out	0x32, r24	; 50
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <Timer0_Start>:
 42c:	83 b7       	in	r24, 0x33	; 51
 42e:	88 7f       	andi	r24, 0xF8	; 248
 430:	85 60       	ori	r24, 0x05	; 5
 432:	83 bf       	out	0x33, r24	; 51
 434:	08 95       	ret

00000436 <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	2f 93       	push	r18
 442:	3f 93       	push	r19
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
	static int count = 0;
	count++;
 448:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count.1682>
 44c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count.1682+0x1>
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count.1682+0x1>
 456:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count.1682>
	if(Timer0_No_OVFs == count)
 45a:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <Timer0_No_OVFs>
 45e:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <Timer0_No_OVFs+0x1>
 462:	28 17       	cp	r18, r24
 464:	39 07       	cpc	r19, r25
 466:	a9 f5       	brne	.+106    	; 0x4d2 <__vector_11+0x9c>
	{
		// Write your code her
		
		// Counter Conditions
		Counter_Of_Flag++;
 468:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if((Counter_Of_Flag%4) == 0)
 472:	98 2f       	mov	r25, r24
 474:	93 70       	andi	r25, 0x03	; 3
 476:	19 f4       	brne	.+6      	; 0x47e <__vector_11+0x48>
		{
			Flag_1 = 1;
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Flag_1>
		}
			
		if((Counter_Of_Flag%5) == 0)
 47e:	9d ec       	ldi	r25, 0xCD	; 205
 480:	89 9f       	mul	r24, r25
 482:	91 2d       	mov	r25, r1
 484:	11 24       	eor	r1, r1
 486:	96 95       	lsr	r25
 488:	96 95       	lsr	r25
 48a:	29 2f       	mov	r18, r25
 48c:	22 0f       	add	r18, r18
 48e:	22 0f       	add	r18, r18
 490:	92 0f       	add	r25, r18
 492:	89 13       	cpse	r24, r25
 494:	03 c0       	rjmp	.+6      	; 0x49c <__vector_11+0x66>
		{
			Flag_2 = 1;
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Flag_2>
		}
		
		if((Counter_Of_Flag%6) == 0)
 49c:	9b ea       	ldi	r25, 0xAB	; 171
 49e:	89 9f       	mul	r24, r25
 4a0:	91 2d       	mov	r25, r1
 4a2:	11 24       	eor	r1, r1
 4a4:	96 95       	lsr	r25
 4a6:	96 95       	lsr	r25
 4a8:	29 2f       	mov	r18, r25
 4aa:	22 0f       	add	r18, r18
 4ac:	92 0f       	add	r25, r18
 4ae:	29 2f       	mov	r18, r25
 4b0:	22 0f       	add	r18, r18
 4b2:	82 13       	cpse	r24, r18
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <__vector_11+0x86>
		{
			Flag_3 = 1;
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Flag_3>
		}
		
		if(Counter_Of_Flag == 60)
 4bc:	8c 33       	cpi	r24, 0x3C	; 60
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__vector_11+0x8e>
			Counter_Of_Flag = 0;
 4c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		count = 0;
 4c4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count.1682+0x1>
 4c8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <count.1682>
		TCNT0 = Timer0_Init_val;
 4cc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Timer0_Init_val>
 4d0:	82 bf       	out	0x32, r24	; 50
	}
}
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
	static int count = 0;
	count++;
 4f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 4fa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 504:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	if (Timer0_No_OVFs == 1)
 508:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <Timer0_No_OVFs>
 50c:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <Timer0_No_OVFs+0x1>
 510:	21 30       	cpi	r18, 0x01	; 1
 512:	31 05       	cpc	r19, r1
 514:	59 f4       	brne	.+22     	; 0x52c <__vector_10+0x48>
	{
		if(Timer0_No_OVFs == count)
 516:	28 17       	cp	r18, r24
 518:	39 07       	cpc	r19, r25
 51a:	c1 f4       	brne	.+48     	; 0x54c <__vector_10+0x68>
		{
			// Write your code here
			
			
			count = 0;
 51c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 520:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			OCR0 = Timer0_Init_val;
 524:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Timer0_Init_val>
 528:	8c bf       	out	0x3c, r24	; 60
 52a:	10 c0       	rjmp	.+32     	; 0x54c <__vector_10+0x68>
		}
	}
	else
	{
		if (count == 1)
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	91 05       	cpc	r25, r1
 530:	19 f4       	brne	.+6      	; 0x538 <__vector_10+0x54>
		{
			OCR0 = 255;
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	8c bf       	out	0x3c, r24	; 60
 536:	0a c0       	rjmp	.+20     	; 0x54c <__vector_10+0x68>
		}
		else if(Timer0_No_OVFs == count)
 538:	28 17       	cp	r18, r24
 53a:	39 07       	cpc	r19, r25
 53c:	39 f4       	brne	.+14     	; 0x54c <__vector_10+0x68>
		{
			//write your code here
			
			
			count = 0;
 53e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 542:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			OCR0 = Timer0_Init_val;
 546:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Timer0_Init_val>
 54a:	8c bf       	out	0x3c, r24	; 60
		}
	}	
}
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__muluhisi3>:
 55e:	0e 94 ba 02 	call	0x574	; 0x574 <__umulhisi3>
 562:	a5 9f       	mul	r26, r21
 564:	90 0d       	add	r25, r0
 566:	b4 9f       	mul	r27, r20
 568:	90 0d       	add	r25, r0
 56a:	a4 9f       	mul	r26, r20
 56c:	80 0d       	add	r24, r0
 56e:	91 1d       	adc	r25, r1
 570:	11 24       	eor	r1, r1
 572:	08 95       	ret

00000574 <__umulhisi3>:
 574:	a2 9f       	mul	r26, r18
 576:	b0 01       	movw	r22, r0
 578:	b3 9f       	mul	r27, r19
 57a:	c0 01       	movw	r24, r0
 57c:	a3 9f       	mul	r26, r19
 57e:	70 0d       	add	r23, r0
 580:	81 1d       	adc	r24, r1
 582:	11 24       	eor	r1, r1
 584:	91 1d       	adc	r25, r1
 586:	b2 9f       	mul	r27, r18
 588:	70 0d       	add	r23, r0
 58a:	81 1d       	adc	r24, r1
 58c:	11 24       	eor	r1, r1
 58e:	91 1d       	adc	r25, r1
 590:	08 95       	ret

00000592 <_exit>:
 592:	f8 94       	cli

00000594 <__stop_program>:
 594:	ff cf       	rjmp	.-2      	; 0x594 <__stop_program>
